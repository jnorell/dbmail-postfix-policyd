#! /bin/sh
### BEGIN INIT INFO
# Provides:          dbmail-postfix-policyd
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/Stop dbmail-postfix-policyd policy daemon
# Description:       dbmail-postfix-policyd is a Postfix policy daemon 
#                    for use with DBMail
### END INIT INFO

#
# Author: Jesse Norell <jesse@kci.net>
#

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Postfix policy daemon for DBMail"
NAME=dbmail-postfix-policyd
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS="-d"
PIDDIR=/var/run/$NAME
PIDFILE=/var/run/$NAME/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Set default values for configuration variables
[ -z "$_DBMAIL_CONF" ] && [ -f /etc/dbmail/dbmail.conf ] && _DBMAIL_CONF="/etc/dbmail/dbmail.conf"
[ -z "$_DBMAIL_CONF" ] && [ -f /etc/dbmail.conf ] && _DBMAIL_CONF="/etc/dbmail.conf"
[ -z "$_USER" ] && _USER="dbmail"
[ -z "$_GROUP" ] && _GROUP="dbmail"

# Construct DAEMON_ARGS from configuration variables
[ -z "$_DBMAIL_CONF" ] || DAEMON_ARGS="${DAEMON_ARGS} --dbmail-conf=${_DBMAIL_CONF}"
[ -z "$_DBMAIL_VERSION" ] || DAEMON_ARGS="${DAEMON_ARGS} --dbmail-version=${_DBMAIL_VERSION}"
[ -z "$_VERBOSE" ] || DAEMON_ARGS="${DAEMON_ARGS} -v"
[ -z "$_INET" ] || DAEMON_ARGS="${DAEMON_ARGS} --inet=${_INET}"
[ -z "$_UNIX" ] || DAEMON_ARGS="${DAEMON_ARGS} --unix=${_UNIX}"
[ -z "$_PIDDIR" ] || PIDDIR=${_PIDDIR}
[ -z "$_PIDFILE" ] || PIDFILE=${_PIDFILE}
[ -z "$PIDFILE" ] || DAEMON_ARGS="${DAEMON_ARGS} --pidfile=${PIDFILE}"
[ -z "$_USER" ] || DAEMON_ARGS="${DAEMON_ARGS} --user=${_USER}"
[ -z "$_GROUP" ] || DAEMON_ARGS="${DAEMON_ARGS} --group=${_GROUP}"
[ -z "$_DBTYPE" ] || DAEMON_ARGS="${DAEMON_ARGS} --dbtype=${_DBTYPE}"
[ -z "$_DBHOST" ] || DAEMON_ARGS="${DAEMON_ARGS} --dbhost=${_DBHOST}"
[ -z "$_SQLPORT" ] || DAEMON_ARGS="${DAEMON_ARGS} --sqlport=${_SQLPORT}"
[ -z "$_SQLSOCKET" ] || DAEMON_ARGS="${DAEMON_ARGS} --sqlsocket=${_SQLSOCKET}"
[ -z "$_DBUSER" ] || DAEMON_ARGS="${DAEMON_ARGS} --dbuser=${_DBUSER}"
[ -z "$_DBPASS" ] || DAEMON_ARGS="${DAEMON_ARGS} --dbpass=${_DBPASS}"
[ -z "$_DBDB" ] || DAEMON_ARGS="${DAEMON_ARGS} --dbdb=${_DBDB}"
[ -z "$_OPTS" ] || DAEMON_ARGS="${DAEMON_ARGS} ${_OPTS}"

if [ ! -d ${PIDDIR} ]
then
	mkdir -p -m 0755 ${PIDDIR}
	chown ${_USER}:${_GROUP} ${PIDDIR}
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	#start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --user ${_USER}
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	#start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --user ${_USER}
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
